#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:[11pt,oneside]
#+LATEX_HEADER: \usepackage{article}


#+TITLE: flask-socketio
#+AUTHOR: 万泽(德山书生)
#+CREATOR: wanze(<a href="mailto:a358003542@gmail.com">a358003542@gmail.com</a>)
#+DESCRIPTION: 制作者邮箱：a358003542@gmail.com

* 简介
推荐使用 ~flask-socketio~ 这个模块:

#+BEGIN_EXAMPLE
pip install flask-socketio
#+END_EXAMPLE

其入门tutorial在 [[http://blog.miguelgrinberg.com/post/easy-websockets-with-flask-and-gevent][这里]] ，其github地址在 [[https://github.com/miguelgrinberg/Flask-SocketIO][这里]] ，其官方文档地址在 [[https://github.com/miguelgrinberg/Flask-SocketIO][这里]] 。


* 第一个例子
test.py

#+BEGIN_SRC python
from flask import Flask, render_template
from flask.ext.socketio import SocketIO, emit

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app)

@app.route('/')
def index():
    return render_template('index.html')

@socketio.on('my event', namespace='/test')
def test_message(message):
    emit('my response', {'data': message['data']})

@socketio.on('my broadcast event', namespace='/test')
def test_message(message):
    emit('my response', {'data': message['data']}, broadcast=True)

@socketio.on('connect', namespace='/test')
def test_connect():
    emit('my response', {'data': 'Connected'})

@socketio.on('disconnect', namespace='/test')
def test_disconnect():
    print('Client disconnected')

if __name__ == '__main__':
    socketio.run(app,debug=True)
#+END_SRC

然后在templates文件夹下建立的 ~index.html~ :
#+BEGIN_SRC html
<!DOCTYPE HTML>
<html>
<head>
    <title>Flask-SocketIO Test</title>
    <script type="text/javascript" src="//code.jquery.com/jquery-1.4.2.min.js"></script>
    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.5/socket.io.min.js"></script>

<script>
$(document).ready(function(){
    var socket = io.connect('http://' + document.domain + ':' + location.port + '/test');
    socket.on('my response', function(msg) {
        $('#log').append('<p>Received: ' + msg.data + '</p>');
    });
    $('form#emit').submit(function(event) {
        socket.emit('my event', {data: $('#emit_data').val()});
        return false;
    });
    $('form#broadcast').submit(function(event) {
        socket.emit('my broadcast event', {data: $('#broadcast_data').val()});
        return false;
    });
});
</script>

</head>
<body>
    <h1>Flask-SocketIO Test</h1>
    <h2>Send:</h2>
    <table>
        <tr>
            <td>
                <form id="emit" method='POST' action='#'>
                    <textarea name="emit_data" id="emit_data"></textarea>
                    <div><input type="submit" value="Emit"></div>
                </form>
            </td>
            <td>
                <form id="broadcast" method='POST' action='#'>
                    <textarea name="broadcast_data" id="broadcast_data"></textarea>
                    <div><input type="submit" value="Broadcast"></div>
                </form>
            </td>
        </tr>
    </table>
    <h2>Receive:</h2>
    <div id="log"></div>
</body>
</html>
#+END_SRC

推荐在额外安装个 ~eventlet~ :
#+BEGIN_EXAMPLE
pip3 install eventlet
#+END_EXAMPLE
来支持更好的websocket并发，但在这里不是重点。首先我们看到代码，很是简洁明了，我想需要就以下细节说明以下即可:


** 事件
遇到何种事件做何种事情，默认的内置事件有: ~connect~ , ~disconnect~ , ~message~ , ~json~ 。后面再详细讨论之。

** namespace
含义类似于flask蓝图的 ~url_prefix~ 。

** emit函数
具体发送某个事件和该事件下的信息。然后我们看到 ~broadcast=True~ ，这样本次信号发送相当于一次广播，所有打开的网页都可以接受到这个广播信号，而不加的话，只有某一个web client能够看到。

再来看到网页那边，需要加载 ~jquery~ 和 ~socket.io~ 这两个js库。
#+BEGIN_EXAMPLE
<script type="text/javascript" src="//code.jquery.com/jquery-1.4.2.min.js"></script>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.5/socket.io.min.js"></script>
#+END_EXAMPLE

然后是下面这段代码，因为我js也是个新手，读者可以和我一起慢慢看一下。
#+BEGIN_SRC js
<script>
$(document).ready(function(){
    var socket = io.connect('http://' + document.domain + ':' + location.port + '/test');
    socket.on('my response', function(msg) {
        $('#log').append('<p>Received: ' + msg.data + '</p>');
    });
    $('form#emit').submit(function(event) {
        socket.emit('my event', {data: $('#emit_data').val()});
        return false;
    });
    $('form#broadcast').submit(function(event) {
        socket.emit('my broadcast event', {data: $('#broadcast_data').val()});
        return false;
    });
});
</script>
#+END_SRC

首先是在文档加载完之后执行这个函数，然后建立了一个socket变量，然后当接受到 ~my response~ 事件的时候，则执行该函数，具体就是在log那边表现在添加某个文字内容。

然后下面两个是表单的emit那个标签，也就是html代码的emit那个按钮，如果点击submit了则执行这个函数，大体是发送 ~my event~ 事件，后面跟着某个data。

整个过程大体就是如此，读者可以简单的事件看一下效果。




