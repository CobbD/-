#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:[11pt,oneside]
#+LATEX_HEADER: \usepackage{article}



#+TITLE: configparser配置文件管理
#+AUTHOR: 万泽(德山书生)
#+CREATOR: 编者:wanze(<a href="mailto:a358003542@163.com">a358003542@163.com</a>)
#+DESCRIPTION: 制作者邮箱：a358003542@gmail.com


* ConfigParser模块
简单的配置文件管理就用python的内置模块ConfigParse，在python3下是configparser。

具体使用新用户推荐就用 ~SafeConfigParser~ 类，其继承自 ~Configparer~ 类，其又继承自 ~RawConfigParser~ 类。我在初步学习了python2的ConfigParser模块的使用之后，一个感想就是config应该建立类似字典的api出来，这样对用户的使用更加友好，然后看到python3的configparser，果然python3对这个模块的修改让其更加简单易用了，现在python3里面的config更接近字典的api操作了。

下面是python3官方文档提供的例子:
#+BEGIN_EXAMPLE
>>> import configparser
>>> config = configparser.ConfigParser()
>>> config['DEFAULT'] = {'ServerAliveInterval': '45',
...                      'Compression': 'yes',
...                      'CompressionLevel': '9'}
>>> config['bitbucket.org'] = {}
>>> config['bitbucket.org']['User'] = 'hg'
>>> config['topsecret.server.com'] = {}
>>> topsecret = config['topsecret.server.com']
>>> topsecret['Port'] = '50022'     # mutates the parser
>>> topsecret['ForwardX11'] = 'no'  # same here
>>> config['DEFAULT']['ForwardX11'] = 'yes'
>>> with open('example.ini', 'w') as configfile:
...   config.write(configfile)
#+END_EXAMPLE
更多详细细节请参看python3的官方文档，下面主要就python2的ConfigParser模块作一些说明。


* 配置文件的格式
配置文件还可以采用一种冒号分隔的格式，不过推荐就采用等号的格式，如下所示:
#+BEGIN_EXAMPLE
[section1]
key = value
#+END_EXAMPLE

其中value变成字符串之后两边的空格都会被移除。


* SafeConfigParser类
前面谈到新用户推荐就使用SafeConfigParser类来新建一个config对象，如下所示:
#+BEGIN_EXAMPLE
import ConfigParser
config = ConfigParser.SafeConfigParser()
#+END_EXAMPLE

** 读取一个配置文件
如果有现有的配置文件需要读取，则调用config对象的 *read* 方法:
#+BEGIN_EXAMPLE
config.read('test.cfg')
#+END_EXAMPLE

read方法调用完就行了，config对象已经存储了那些值了。

** 获取某个值
调用config对象的 *get* 方法，具体格式如下:
#+BEGIN_EXAMPLE
config.get(section, option[, raw[, vars]])
#+END_EXAMPLE

其有两个必填参数，第一个是section的名字，默认的"DEFAULT"也可以这样填上去，然后第二个参数是该section下的某个键或说option。

** 插入或修改某个值
调用config对象的 *set* 方法来进行修改某个值的操作，具体格式如下:
#+BEGIN_EXAMPLE
config.set(section, option, value)
#+END_EXAMPLE

其有三个必填参数，第一个是section的名字，默认的"DEFAULT"也可以这样填上去，然后第二个是该section下某个键或说某个option，然后具体该option的值设置为第三个参数。

然后需要注意的是，如果set方法对于的某个section名字原config对象还没有的话，会报错的。你需要先调用 *add_section* 方法来插入该section，然后才能正常用set设置某个键值。

#+BEGIN_EXAMPLE
config.add_section('Section1')
#+END_EXAMPLE

** 写入配置文件
config对象修改好了之后，最后就是写入配置文件中去了。调用 *write* 方法，然后接一个文件对象，如下所示:

#+BEGIN_EXAMPLE
config.write(open("test.cfg","w"))
#+END_EXAMPLE


* 其他额外的一些方法
** getint方法
#+BEGIN_EXAMPLE
config.getint(section, option)
#+END_EXAMPLE
get方法的补充，从名字看得出来，其返回一个int值。

** getfloat方法
#+BEGIN_EXAMPLE
config.getfloat(section, option)
#+END_EXAMPLE
get方法的补充，从名字看得出来，其返回一个float值。

** getboolean方法
#+BEGIN_EXAMPLE
config.getboolean(section, option)
#+END_EXAMPLE
get方法的补充，从名字看得出来，其返回一个布尔值。

具体规则是，字符串 "1" ，"true" ， "on" 不分大小写视作 True ； 字符串 "0" ， "false" ， "off" 不分大小写视作 False；其他都视作 ValueError。


** items方法
#+BEGIN_EXAMPLE
config.items(section)
#+END_EXAMPLE
把某个section部分看作字典，调用类似字典的items方法，返回键值对列表。

** has_section
判断某个section是否存在，"DEFAULT"不在考虑范围内。

#+BEGIN_EXAMPLE
config.has_section(section)
#+END_EXAMPLE


还有其他一些方法这里就不赘述了，具体请参看 [[https://docs.python.org/2/library/configparser.html][官方文档]] 。


------------------------

* python3的情况
python3之后configparser的使用更加简单了，具体就分为如下几步:

** 新建一个configparser对象
#+BEGIN_EXAMPLE
import configparser
config = configparser.ConfigParser()
#+END_EXAMPLE

** 读取某个config文件
调用read方法具体读取某个config文件。
#+BEGIN_EXAMPLE
config.read('test.cfg')
#+END_EXAMPLE

** 如同字典一般操作configparser对象
然后接下来就是如同字典一般操作这个configparser对象。其中 'DEFAULT' 是特殊的section，大致如下这样表达:
#+BEGIN_EXAMPLE
config['DEFAULT'] = {'ServerAliveInterval': '45',
                     'Compression': 'yes',
                     'CompressionLevel': '9'}
config['bitbucket.org'] = {}
config['bitbucket.org']['User'] = 'hg'
config['topsecret.server.com'] = {}
#+END_EXAMPLE


** 调用write方法写入
#+BEGIN_EXAMPLE
with open('example.ini', 'w') as configfile:
    config.write(configfile)
#+END_EXAMPLE

* 不默认更改大小写
具体请参看 [[http://stackoverflow.com/questions/19359556/configparser-reads-capital-keys-and-make-them-lower-case][这个网页]] ，configparser模块默认吧option name也就是每个section的key name改成小写，我不太喜欢这种风格，因为将configparser刷成字典值时，我们通常认为字典的key大小写是区分的，可以如下改动，然后就不自动进行小写操作了:

#+BEGIN_SRC python
self.cfg = configparser.ConfigParser()
self.cfg.optionxform = str## not auto make it lowercase
#+END_SRC
