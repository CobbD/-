#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:[11pt,oneside]
#+LATEX_HEADER: \usepackage{article}


#+TITLE: python3语言学习补充补充
#+AUTHOR: 万泽(德山书生)
#+CREATOR: wanze(<a href="mailto:a358003542@gmail.com">a358003542@gmail.com</a>)
#+DESCRIPTION: 制作者邮箱：a358003542@gmail.com


* reversed函数
我学过python有段时间了，竟然第一次听过这个函数，而且这个函数还是python语言的关键词内置函数。学过一点python的懂得炫技的同学都会这样来进行列表反序操作:
#+BEGIN_EXAMPLE
lst[::-1]
#+END_EXAMPLE

而推荐的做法是直接用reversed函数来做:
#+BEGIN_EXAMPLE
reversed(lst)
#+END_EXAMPLE

然后我们马上就想到，列表有 ~reverse~ 方法，其是破坏型的方法，然后类似的还有 ~sort~ 方法，破坏型的，其对应非破坏型方法有 ~sorted~ 。一般使用没有特别需求是都应该使用非破坏型方法，reversed，sorted等等。

* deque结构
本小节主要参考了 [[http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p03_keep_last_n_items.html][这个网页]] 。

我想读者可能已经接触过queue结构了吧，queue结构是一端进data，然后另一端出data，这样形成了先进先出的数据流。而deque结构两端都可以进两端都可以出，这看上有点古怪，如果你只使用一端的话，那么其好像一个堆栈结构，是先进后出的；而如果一端只是进，另一端只是出，其又好像一个queue结构。那么其有什么优势呢？deque结构最大的优势，也就是我们需要使用它的原因是: 其两端插入元素和删除元素的时间复杂度是O(1)，是一个常数级，而列表开头插入或删除元素的时间复杂度是O(N)，所以如果我们需要一个类似列表的数据存储结构，而这个数据结构中，开头的几个元素和末尾的几个元素都比较重要，经常被访问，那么就应该使用deque结构。

上面的网页介绍了这么一个函数，用来返回一个文件最后的几行:
#+BEGIN_SRC python
from collections import deque
def tail(filename, n=10):
    'Return the last n lines of a file'
    with open(filename) as f:
        return deque(f, n)
#+END_SRC

其是利用了deque还有一个size定长的概念，输入的队列进入deque时较老的元素会被丢弃。我不太清楚这种做法效率如何，不过这种写法还是很优雅的。


* 大规模字符串连接推荐使用join方法
参看参考资料1的建议27。大规模字符串连接，join方法更有效率。

* 查找多个最大最小元素的情况
如果只是想要获知某些数据的一个最大值或者一个最小值，那么当然用 ~max~ 或 ~min~ 方法就可以了。这里讨论的情况是如果你想要获知某些数据的多个最大值或多个最小值。一般想到的就是先对这些数据进行排序，然后进行切片操作。参考资料2的第一章第四节讨论的方法实际上是利用最小堆结构进行堆排序然后提出最大或最小的那个几个元素。

大体过程就是:
#+BEGIN_EXAMPLE
lst = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]
import heapq
heapq.heapify(lst)
heapq.nlargest(3,lst)
heapq.nsmallest(3,lst)
#+END_EXAMPLE

* 元组和列表的比较大小
元组和列表的相等判断还是很好理解的，而对于这样的东西:

#+BEGIN_EXAMPLE
>>> (1,-1) < (2,-2)
#+END_EXAMPLE

确实就有点古怪了。请读者参考 [[http://stackoverflow.com/questions/5292303/python-tuple-comparison][这个网页]] ，按照官方文档的说明:
#+BEGIN_QUOTE
Tuples and lists are compared lexicographically using comparison of corresponding elements. This means that to compare equal, each element must compare equal and the two sequences must be of the same type and have the same length.
#+END_QUOTE

官方文档对于大于小于的情况并没有说得很清楚，然后我们从字里行间大体领会的精神是:

1. 可迭代对象比较大小，是逐个比较的。
2. 逐个比较首先比较是不是相等，如果相等则跳过这个元素的比较，直到遇到某两个不相等的元素，然后返回的就是这两个元素的比较结果。
3. 最后快比较完了（以最小的可迭代对象长度为准），然后如果是相等判断操作，则长度相等就返回相等了。而如果是大小判断操作，则认为长度更长的那个对象更大。

下面是一些例子:
#+BEGIN_EXAMPLE
>>> (1,-1) < (2,-2)
True
>>> (1,-1) < (-1,-2)
False
>>> (1,-1,-3) < (1,-1)
False
>>> (1,-1,) < (1,-1,0)
True
#+END_EXAMPLE

我们再来看到参考资料第一章第五节的内容，其主要利用两个东西来实现了一种优先级队列。第一个就是前面谈及的最小堆结构，第二个就是这样的 ~(priority, index, item)~ 三元元组，有了上面的讨论，我想读者马上就看出这其中的最小堆的挤出逻辑了: 那就是优先级最小的先出来，如果优先级相同则索引值最小的先出来，然后索引值没有重复的了。


* 获取一个月最后的一天
首先要说的是利用python的datetime和timedelta对于 ~days~ 的加减操作是能够很好地支持跨月问题的:

#+BEGIN_EXAMPLE
>>> from datetime import datetime
>>> d = datetime.now()
>>> d
datetime.datetime(2016, 5, 29, 8, 50, 20, 337204)
>>> from datetime import timedelta
>>> d - timedelta(days = 29)
datetime.datetime(2016, 4, 30, 8, 50, 20, 337204)
>>> d - timedelta(days = 28)
datetime.datetime(2016, 5, 1, 8, 50, 20, 337204)
#+END_EXAMPLE

但是有的时候你就是需要直接获知某个月份的最后一天是30还是31等等，然后利用replace来获得一个月的最后一天。这个时候你需要利用 calendar 的 ~monthrange~ 函数。参考了[[http://stackoverflow.com/questions/42950/get-last-day-of-the-month-in-python][这个网页]] 。

#+BEGIN_EXAMPLE
>>> d.replace(year = 2016,month=4,day = monthrange(2016,4)[-1])
datetime.datetime(2016, 4, 30, 8, 50, 20, 337204)
#+END_EXAMPLE

* 参考资料
1. 编写高质量代码 改善Python程序的91个建议 张颖 赖勇浩 著
2. [[http://python3-cookbook.readthedocs.io/][python3 cookbook]] 



