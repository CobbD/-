#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:[11pt,oneside]
#+LATEX_HEADER: \usepackage{article}

#+HTML_HEAD: <link rel="stylesheet"  href="main.css" />

#+TITLE: 正则表达式入门
#+AUTHOR: 万泽(德山书生)
#+CREATOR: 编者:万泽(德山书生)
#+DESCRIPTION: 制作者邮箱：a358003542@gmail.com


* 正则表达式基础
** 历史
正则表达式的"祖先"可以一直上溯至对人类神经系统如何工作的早期研究。Warren McCulloch 和 Walter Pitts 这两位神经生理学家研究出一种数学方式来描述这些神经网络。

1956 年, 一位叫 Stephen Kleene 的数学家在 McCulloch 和 Pitts 早期工作的基础上，发表了一篇标题为"神经网事件的表示法"的论文，引入了正则表达式的概念。正则表达式就是用来描述他称为"正则集的代数"的表达式，因此采用"正则表达式"这个术语。

随后，发现可以将这一工作应用于使用 Ken Thompson 的计算搜索算法的一些早期研究，Ken Thompson 是 Unix 的主要发明人。正则表达式的第一个实用应用程序就是 Unix 中的 qed 编辑器。

如他们所说，剩下的就是众所周知的历史了。从那时起直至现在正则表达式都是基于文本的编辑器和搜索工具中的一个重要部分。


** 正则表达式
正则表达式就是一个字符模板，用来搜索和匹配对应的字符。

正则表达式有必要的文字和元字符集（特殊用途的字符）组成，其中元字符集的基本元字符集大多数工具都支持：比如vi、ex、grep、egrep、sed、gawk等。

除此之外还有扩展元字符集，还有POSIX标准还提供了一套元字符集。

** 正则表达式测试工具
在linux有一个很好的正则表达式测试工具，强烈推荐。

#+BEGIN_SRC sh
sudo apt-get install kiki
#+END_SRC


** 基础元字符集
同\TeX 一样这些元字符集在这里列出来的意思它们都有额外特别的意思，如果要表示他们，需要用 *\* 符号来转义他们。

#+BEGIN_EXAMPLE
^ $ . * [ ]  \ 
#+END_EXAMPLE


** 扩展元字符集

#+BEGIN_EXAMPLE
+ ?  | ( )  { } 
#+END_EXAMPLE


原则上这些 *基本元字符集* 和 *扩展元字符集* 如果要显示符号那么是需要用 *\* 来转义的，实际上也确实如此。不过我注意到正则表达式并不是那么死板，比如说{}如果内部不是数字，那么不转义也表示本来的意思。还有[]内部是不需要转义的。


我在kiki上做了一些测试，最后的结论是，基本元字符集和扩展元字符集如果要显示本体，加上 *\* 转义总不会有错，在某些情况下是可以不用转义，如果你弄不明白，或者图省心，推荐干脆 _都加上转义_ ，这样总不会有错了。


* vi和正则表达式
为了后面讲解的方便，请到[[http://www.gutenberg.org/files/24039/24039-0.txt][gutenberg]] 下载老子的txt文件，名字修改为laozi.txt。好，我们开始吧。


** 匹配某个单词
首先：

#+BEGIN_EXAMPLE
vi laozi.txt
#+END_EXAMPLE

这样我们就进入vi了。然后我们输入：

#+BEGIN_EXAMPLE
/Lao Zi
#+END_EXAMPLE

这样我们就开始搜索精确匹配含有“Lao Zi”这个字符串了，如果你按： /n/

那么就是继续查找“Lao Zi”，也就是查找下一个。我们看到如果下面出现提示红字那么我们已经将文档查找一边了。然后我们再来查找

#+BEGIN_EXAMPLE
/老子
#+END_EXAMPLE

我们看到整个文档这个词只出现了一次。

*** 查找历史
如果输入 */* 然后按方向键，就如同我们在终端上直接按方向键可以调用上一个命令一样，现在我们可以调用上一次的查找命令。这个有时很有用的。


*** 反向查找
使用问号 *?* 什么就是反向查找。同样 *n* ，下一个也是反向的，你可以理解n是将上一次的查找命令重做一次。



** 锚定行的开始
/^/ 符号表示一行的开始。现在我们执行如下查找命令：

#+BEGIN_EXAMPLE
/^Th
#+END_EXAMPLE

这算是一个小型的正则表达式匹配模式了，用自然语言来描述就是：匹配以T为行首，后面还跟一个字母h的文本。我们看到一些The和This开头的行都匹配进去了，请读者试试 ~/^This~ 来精确匹配以T为行首，后面跟着字母his的文本。


** 锚定行的结尾
/$/ 符号表示一行的结尾。现在让我们匹配以“之。”结尾的文本：

#+BEGIN_EXAMPLE
/之。$
#+END_EXAMPLE

我们看到这个例子只匹配行尾和行尾前面有“之。”这两个字符的文本。

*** 匹配空行
空行的表示就是 ~/^$~ 。这样将会匹配每一条没有任何字符的空行。


** 匹配一个字符
/./ 符号表示任意的一个字符。

** 匹配0个或者多个先前的字符
/*/ 符号匹配0个或者多个之前的字符。


** 匹配多个字符（字符集）
/[ ]/


*** 连续的字符
/[ - ]/

*** 字符集的非逻辑
~[^]~

上面这些都是 _最基本的元字符集_ ，这些基本的元字符集在所有的支持正则表达式的程式或者其他语言的宏包中都是支持的而且含义都是相同的。vi还支持其他一些字符集，考虑到我们的时间紧张，况且上面的这些已经足够我们使用了，那些字符集我们就略过了。

vi编辑器和其他一般的编辑器也有替换操作，不过那些替换操作较为简单。如果你需要非常复杂的替换模式，推荐使用sed命令，请看下一章sed和正则表达式。


* grep和正则表达式
grep命令使用的基本格式是：

#+BEGIN_EXAMPLE
grep [选项]... PATTERN [FILE]...
#+END_EXAMPLE

基本功能是对输入字符流一行行过滤，如果具体某个正则表达式模式匹配，那么就把这一行打印出来。

在linux下如果遇到某个程序僵死怎么办，这里结合 ~ps aux~ 和grep命令可以快速查询目标程序的进程号。比如你确定某个pdf文件卡死了，那么就执行如下命令查询之：

#+BEGIN_EXAMPLE
=>ps aux | grep 'pdf'
#+END_EXAMPLE

类似的其他文件格式啊，程序名字啊都可以用来过滤信息。

grep -E 扩展元字符集

#+BEGIN_EXAMPLE
+  ?  | ( ) { }
#+END_EXAMPLE


** 匹配1次或者更多次之前的字符

** 匹配0次或1次之前的字符

** 或逻辑

** 保存子字符串group


** 之前的字符重复几次到几次



* sed和正则表达式
sed命令告诉sed对行做什么样的处理：打印、删除或修改等等。对文件的替换等等操作之所以推荐使用sed是因为sed是非破坏性的，它将文件的行[fn::其内部工作原理是一行一行读取存取处理打印]存入缓存区，然后进行一些修改，然后打印到终端（或者重定向到某个文件）等，总之就是不会破坏原文件。

基本命令格式如下：

#+BEGIN_EXAMPLE
sed 'command'  filename
#+END_EXAMPLE

通过 ~--help~ 我们看到最常用的选项应该是： ~-n~ ，取消默认自动打印模式空间（也就是未处理的行）， ~-f~ ，用于加载某个脚本文件，其他的暂时先不考虑。至于选项 ~-e~ ，一般不写，就是默认的那种格式吧。

** 打印行

#+BEGIN_EXAMPLE
=>sed   'p'  test.txt
#+END_EXAMPLE

p就是打印行的意思，我们看到每一行重复了两次，这是因为sed默认之前的行也要打印一次。可以用 ~-n~ 选项来取消这点。


#+BEGIN_EXAMPLE
=>sed -n 'p'  test.txt > test2.txt
#+END_EXAMPLE

现在我们有了一个简单的复制文件的命令了。在sed中数字代表行数， *$* 符号代表最后一行，然后逗号表示一个范围。现在让我们打印第一行和打印第一行到第三行：

#+BEGIN_EXAMPLE
=>sed -n '1 p'  test.txt
this is fist line
=>sed -n '1,3 p'  test.txt
this is fist line

this is second line
#+END_EXAMPLE

** sed中的正则表达式
下面重点说说sed利用正则表达式来进行复杂的文本替换操作，除了前面的基本元字符集之外，sed还有下面的几个元字符（还有一些这里并没有提及）：
~\(  \)~ 其中 ~\(  \)~  括起来的内容表示正则表达式匹配字符串中某一个子字符串(group)，相当于一个暂存变量，后面可以用 ~\1~ 等来引用。这是很常用的一个概念，和python中的re模块类似，不过语法稍微有点差异。更详细的讨论见下面的例子。

** 替换命令

#+BEGIN_EXAMPLE
=>sed  's/good/goodmorning/g'  test.txt
this is fist line

this is second line

this is third line

"goodmorning morning"
#+END_EXAMPLE


这里命令开头的s表示替换操作，最后那个g表示对整个行，否则将只对每一行遇到的第一个模板进行处理。替换命令两个/夹着的部分，第一个是待匹配的正则表达式模板，第二个要替换成为的内容。整个命令的意思就是将text.txt文本中所有出现的good字符替换为goodmorning。

*** 替换加上匹配的子字符串
在linux下怎么大量将"一串字符"都替换为中文标点的“同样一串字符”。 具体效果就是这样的： "测试文字" → “测试文字”。这个待处理文本很大，显然必须使用批处理的方式。而这里使用sed一个命令就可以搞定。


#+BEGIN_EXAMPLE
sed  's/"\([^"]*\)"/“\1”/g'  test.txt >test2.txt
#+END_EXAMPLE

我们慢慢来分析这个正则表达式，首先英文的引号"然后我们看到后面还有一个英文的引号"，而在这两个英文引号之间的内容我们希望保存起来为后面所用，于是就用 ~\(     \)~ 将其包围起来，内部的内容是除了英文的引号其他字符都可以，然后用星号表示匹配零个或者多个之前的字符。

后面要替换成为中文引号包围下的内容，具体内容的引用使用 ~\1~ ，这里 ~\0~ 表示整个正则表达式匹配的内容， ~\1~ 表示第一个括号匹配的子字符串， ~\2~ 表示第二个括号（从左到右）匹配的子字符串等等，sed最多只能到 ~\9~ 。

这里讨论的保存匹配的子字符串group的概念在正则表达式中是通用的。

** 参考资料
1. linux shell实例精解, Ellie Quigley
2. [[http://deerchao.net/tutorials/regex/regex.htm][正则表达式30分钟入门教程]]

