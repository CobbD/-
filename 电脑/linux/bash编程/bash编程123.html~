<!DOCTYPE html>
<html>
<head>
<!-- 2016-06-23 四 13:36 -->
<meta  charset="utf-8">
<meta  name="viewport" content="width=device-width, initial-scale=1">
<title>bash编程123</title>
<meta  name="generator" content="Org-mode">
<meta  name="author" content="万泽(德山书生)">
<meta  name="description" content="制作者邮箱：a358003542@gmail.com"
>
<style type="text/css">
body {
    margin-right: auto;
    margin-left: auto;
}

.title {
    display: block;
    text-align: center;
    padding: 10px;
}

.center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.underline{
    text-decoration: underline;
}
   html, body {
    margin: 0;
    padding: 0;
    font-family:"Microsoft YaHei",Arial,Helvetica,sans-serif,"宋体";
    font-size: 1em;
}

#content {
    display: block;
    margin-left: auto;
    margin-right: auto;
    background:#fcfcfc;
    height:100%;
    margin-left:300px;
    max-width:800px;
    min-height:100%;
    padding:1.618em 3.236em;
}

code {
    padding: 2px 4px;
    color: #c7254e;
    background-color: #f9f2f4;
    border-radius: 4px;
}

pre {
    max-width: 100%;
    display: block;
    padding: 9.5px;
    margin: 0 0 10px;
    font-size: 13px;
    line-height: 1.42857143;
    color: #333;
    background-color: #f5f5f5;
    border: 1px solid #ccc;
    border-radius: 4px;
    overflow : auto;
}


blockquote {
    padding: 10px 20px;
    margin: 0 0 20px;
    font-size: 17.5px;
    border-left: 5px solid #eee;
}

li{
    margin-top: 0.5em;
    margin-bottom: 0.5em;
}

p{
    text-indent:2em;
    line-height:150%;
}

/* dl */
dl {
    margin-top: 0;
    margin-bottom: 20px;
}
dt {
    font-weight: 700;
    line-height: 150%;
    margin-top: 0.5em;
    margin-bottom: 0.5em;
}
dd {
    line-height: 150%;
}

@media (min-width: 768px) {
  dt {
    white-space: nowrap;
  }
}

video{
    max-width: 100%;
    margin-left: auto;
    margin-right: auto;
}

figure p{
    text-indent:0em;
}
img{
    max-width: 100%;
}

embed{
    max-width: 100%;
    margin-left: auto;
    margin-right: auto;
}

figure{
    text-align: center;
}

/*  class  */
.FRAMED{
    max-width:100%;
    border:1px solid ;
    padding: 1em;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.NOTECARD{
    width: 35%;
    position:relative;
    right: -30%;
    padding: 1em;
    margin:0 auto;
    border: solid 1px;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

/*
table
*/
table {
    border-collapse: collapse;
    border-spacing: 0;
    margin: 16px 0;
    empty-cells: show;
    border: 1px solid #ccc;
    width: 100%;
    display: table;
}

table tr {
    border-bottom: 1px solid #ddd;
}
table th,table td{
    padding:8px;
}

table tr:nth-child(even) {
    background-color: #f1f1f1;
}








ul,ol,dl{
    line-height:24px;
    list-style-image:none;
    /* list-style:none; */
    margin:0px 0px 24px 0px;
    padding:0;
}

li{
    margin-left: 24px;
}

dd{
    margin:0;
}

#content .section ul,#content .toctree-wrapper ul,article ul{
    list-style:disc;
    line-height:24px;
    margin-bottom:24px}

#content .section ul li,#content .toctree-wrapper ul li,article ul li{
    list-style:disc;
    margin-left:24px}

#content .section ul li p:last-child,#content .toctree-wrapper ul li p:last-child,article ul li p:last-child{
                                                                                                                                  margin-bottom:0}

#content .section ul li ul,#content .toctree-wrapper ul li ul,article ul li ul{
    margin-bottom:0}

#content .section ul li li,#content .toctree-wrapper ul li li,article ul li li{
    list-style:circle}

#content .section ul li li li,#content .toctree-wrapper ul li li li,article ul li li li{
    list-style:square}

#content .section ul li ol li,#content .toctree-wrapper ul li ol li,article ul li ol li{
    list-style:decimal}

#content .section ol,#content ol,article ol{
    list-style:decimal;
    line-height:24px;
    margin-bottom:24px}

#content .section ol li,#content ol li,article ol li{
    list-style:decimal;
    margin-left:24px}

#content .section ol li p:last-child,#content ol li p:last-child,article ol li p:last-child{
                                                                                                                           margin-bottom:0}

#content .section ol li ul,#content ol li ul,article ol li ul{
    margin-bottom:0}

#content .section ol li ul li,#content ol li ul li,article ol li ul li{
    list-style:disc}

dl dt{
    font-weight:bold;
}

dl p,dl table,dl ul,dl ol{
    margin-bottom:12px !important;
}

dl dd{
    margin:0 0 12px 24px;
}

@media print{
    .codeblock,pre.src{
        white-space:pre.src-wrap}
}

@media print{
    html,body,section{
        background:none !important}

    *{
        box-shadow:none !important;
        text-shadow:none !important;
        filter:none !important;
        -ms-filter:none !important}

    a,a:visited{
          text-decoration:underline}

    pre.src,blockquote{
        page-break-inside:avoid}

    thead{
        display:table-header-group}

    tr,img{
        page-break-inside:avoid}

    img{
        max-width:100% !important}

    @page{
        margin:0.5cm}

    p,h2,h3{
        orphans:3;
        widows:3}

    h2,h3{
        page-break-after:avoid}
}

@media print{
    #postamble{
        display:none}

    #content{
        margin-left:0}
}

@media print{
    #table-of-contents{
        display:none}

    @page{
        size: auto;
        margin: 25mm 25mm 25mm 25mm;}

    body {
        margin: 0px;}
}

@media screen and (max-width: 768px){
}

@media only screen and (max-width: 480px){
}

@media screen and (max-width: 768px){
    .tablet-hide{
        display:none}
}

@media screen and (max-width: 480px){
    .mobile-hide{
        display:none}
}

@media screen and (max-width: 480px){
}

@media screen and (max-width: 768px){
    #content{
        margin-left:0;
        padding: 1em 1em;}

    #content #content{
        padding:1.618em}

    #content.shift{
        position:fixed;
        min-width:100%;
        left:85%;
        top:0;
        height:100%;
        overflow:hidden}
}

@media screen and (min-width: 1400px){
    #content{
        background:rgba(0,0,0,0.05)}

    #content{
        background:#fcfcfc}
}

@media screen and (max-width: 768px){
    #copyright{
        width:85%;
        display:none}

    #copyright.shift{
        display:block}

    img{
        width:100%;
        height:auto}
}

@media screen and (max-width: 480px){
    #content .sidebar{
        width:100%}
}


.figure p{
    color:#000;
    font:italic 85%/1 arial,sans-serif;
    padding:1em 0;
}

.rotate-90{
    -webkit-transform:rotate(90deg);
    -moz-transform:rotate(90deg);
    -ms-transform:rotate(90deg);
    -o-transform:rotate(90deg);
    transform:rotate(90deg);
}

.rotate-270{
    -webkit-transform:rotate(270deg);
    -moz-transform:rotate(270deg);
    -ms-transform:rotate(270deg);
    -o-transform:rotate(270deg);
    transform:rotate(270deg);
}

#toggle-sidebar,
#table-of-contents .close-sidebar {
    display: none;
}

@media screen and (max-width: 768px) {
    #table-of-contents {
        display: none;
        width: 60%;
    }

    #table-of-contents h2 a {
        display: block;
    }

    #table-of-contents:target {
        display: block;
    }

    #copyright, #postamble {
        display: none;
    }

    #toggle-sidebar {
        background-color: #2980B9;
        display: block;
        margin-bottom: 1.6em;
        padding: 0.6em;
        text-align: center;
    }

    #toggle-sidebar h2 {
        color: white;
        font-size: 100%;
        line-height: 50px;
        margin: 0;
        padding: 0;
    }

    #table-of-contents .close-sidebar {
       color: rgba(255, 255, 255, 0.3);
       display: inline-block;
       margin: 0px 10px 0px 45px;
       padding: 10px;
    }
}

*{
    -webkit-box-sizing:border-box;
    -moz-box-sizing:border-box;
    box-sizing:border-box;
}

figcaption,figure,footer,header,hgroup,nav{
    display:block}

ins{
    background:#ff9;
    color:#000;
    text-decoration:none}

mark{
    background:#ff0;
    color:#000;
    font-style:italic;
    font-weight:bold}

small{
    font-size:85%}

sub,sup{
    font-size:75%;
    line-height:0;
    position:relative;
    vertical-align:baseline}

sup{
    top:-0.5em}

sub{
    bottom:-0.25em}

img{
    -ms-interpolation-mode:bicubic;
    vertical-align:middle;
    max-width:100%}

svg:not(:root){
    overflow:hidden}

figure{
    margin:0}

label{
    cursor:pointer}

legend{
    border:0;
    margin-left:-7px;
    padding:0;
    white-space:normal}

#content .danger,#content .error{
    background:#fdf3f2}

legend{
    display:block;
    width:100%;
    border:0;
    padding:0;
    white-space:normal;
    margin-bottom:24px;
    font-size:150%;
    *margin-left:-7px}

label{
    display:block;
    margin:0 0 0.3125em 0;
    color:#333;
    font-size:90%}

a{
    color:#2980B9;
    text-decoration:none;
    cursor:pointer}


a:hover,a:active{
    outline:0;
}

a:hover{
    color:#3091d1}

a:visited{
    color:#9B59B6}

.left{
    text-align:left}

.center{
    text-align:center}

.right{
    text-align:right}

hr{
    display:block;
    height:1px;
    border:0;
    border-top:1px solid #e1e4e5;
    margin:24px 0;
    padding:0}

#table-of-contents li{
    list-style:none;
    margin-left: 0px;
}

#table-of-contents header{
    height:32px;
    display:inline-block;
    line-height:32px;
    padding:0 1.618em;
    display:block;
    font-weight:bold;
    text-transform:uppercase;
    font-size:80%;
    color:#2980B9;
    white-space:nowrap}

#table-of-contents ul{
    margin-bottom:0}

#table-of-contents li.divide-top{
    border-top:solid 1px #404040}

#table-of-contents li.divide-bottom{
    border-bottom:solid 1px #404040}

#table-of-contents li.current{
    background:#e3e3e3}

#table-of-contents li.current a{
    color:gray;
    border-right:solid 1px #c9c9c9;
    padding:0.4045em 2.427em}

#table-of-contents li.current a:hover{
    background:#d6d6d6}

#table-of-contents li a{
    /* color:#404040; */
    padding:0.4045em 1.618em;
    position:relative;
    /* background:#fcfcfc; */
    border:none;
    /* border-bottom:solid 1px #c9c9c9; */
    /* border-top:solid 1px #c9c9c9; */
    padding-left:1.618em -4px}

#table-of-contents li.on a:hover,#table-of-contents li.current>a:hover{
    background:#fcfcfc}

#table-of-contents li ul li a{
    /* background:#c9c9c9; */
    padding:0.4045em 2.427em}

#table-of-contents li ul li ul li a{
    padding:0.4045em 3.236em}

#table-of-contents li.current ul{
    display:block}

/* #table-of-contents li ul{ */
/*     margin-bottom:0; */
/*     display:none} */

#table-of-contents .local-toc li ul{
    display:block}

#table-of-contents li ul li a{
    margin-bottom:0;
    color:#b3b3b3;
    font-weight:normal}

#table-of-contents a{
    display:inline-block;
    line-height:18px;
    padding:0.4045em 1.618em;
    display:block;
    position:relative;
    font-size:90%;
    color:#b3b3b3;
    direction: ltr;
}

#table-of-contents a:hover{
    background-color:#4e4a4a;
    cursor:pointer}

/* #text-table-of-contents { */
/*     overflow:scroll; */
/* } */

#table-of-contents{
    position:fixed;
    top:0;
    left:0;
    width:300px;
    overflow-x:hidden;
    overflow-y:scroll;
    height:100%;
    background:#343131;
    z-index:200;
    scrollbar-base-color: #1F1D1D;
    scrollbar-arrow-color: #b3b3b3;
    scrollbar-shadow-color: #1F1D1D;
    scrollbar-track-color : #343131;
}

#table-of-contents h2{
    z-index:200;
    background-color:#2980B9;
    text-align:center;
    padding:0.809em;
    display:block;
    color:#fcfcfc;
    font-size: 100%;
    margin-bottom:0.809em}

ul.nav li ul li {
    display: none;
}

ul.nav li ul li ul li {
    display: none;
}

ul.nav li.active ul li {
    display: inline;
}

ul.nav li.active ul li ul li {
    display: inline;
}

ul.nav li.active ul li a {
    background-color: #E3E3E3;
    color: #8099B0;
    border-right:solid 1px #c9c9c9 !important;
}

ul.nav li.active ul li.active a {
    background-color: #C9C9C9;
    color: black !important;
    font-weight: bold !important;
}

ul.nav li.active ul li.active ul li.active a {
    color: black !important;
    font-weight: bold !important;
    display: block !important;
}

ul.nav li.active ul li.active ul li a {
    color: #808080 !important;
    font-weight: normal !important;
    display: block !important;
}

ul.nav li.active ul li ul li a {
    display: none !important;
}


ul.nav li ul li ul li ul li {
    display: none !important; /* as long as nav is on multiple levels of ul */
    /* display: none; /* as long as nav is on multiple levels of ul *\/ */
}

ul.nav li.active > a {
    border-bottom:solid 1px #c9c9c9 !important; /* XXX Restrict it to 2nd level */
    border-right:solid 1px #c9c9c9 !important;
}

ul.nav li.active a {
    color: gray !important;
    font-weight:bold;
    background-color: white;
    border-right:solid 0px white !important;
}

ul.nav > li.active > a {
    color: black !important;
}

footer{
    color:#999}

footer p{
    margin-bottom:12px}

#copyright, #postamble{
    position:fixed;
    bottom:0;
    left:0;
    width:300px;
    color:#fcfcfc;
    background:#1f1d1d;
    border-top:solid 10px #343131;
    font-family:"Lato","proxima-nova","Helvetica Neue",Arial,sans-serif;
    font-size: 90%;
    z-index:400;
    padding:12px;
}

#postamble .author {
    font-size: 100%;
    margin-bottom: 0px;
}

#postamble .date {
    font-size: 90%;
    margin-bottom: 0px;
    color: #27AE60;
}

#postamble .creator,#postamble .validation {
    display:none;
}

#copyright a{
    color:#2980B9;
    text-decoration:none}

#copyright .rst-current-version{
    padding:12px;
    background-color:#272525;
    display:block;
    text-align:right;
    font-size:90%;
    cursor:pointer;
    color:#27AE60;
    *zoom:1}

#content img{
    max-width:100%;
    height:auto !important}

#content div.figure{
    margin-bottom:24px}

#content div.figure.align-center{
    text-align:center}

#content .section>img,#content .section>a>img{
    margin-bottom:24px}

.verse{
    border-left:5px solid #6AB0DE;
    background-color: #E7F2FA;
    padding: 6px 20px;
    font-style:italic;
}

#content .note .last,#content .attention .last,#content .caution .last,#content .danger .last,#content .error .last,#content .hint .last,#content .important .last,#content .tip .last,#content .warning .last,#content .seealso .last,#content .admonitiontodo .last{
    margin-bottom:0}

#content .admonition-title:before{
    margin-right:4px}

#content .section ol p,#content .section ul p{
    margin-bottom:12px}

#content h1 .headerlink,#content h2 .headerlink,#content h3 .headerlink,#content h4 .headerlink,#content h5 .headerlink,#content h6 .headerlink,#content dl dt .headerlink{
    display:none;
    visibility:hidden;
    font-size:14px}

#content h1 .headerlink:after,#content h2 .headerlink:after,#content h3 .headerlink:after,#content h4 .headerlink:after,#content h5 .headerlink:after,#content h6 .headerlink:after,#content dl dt .headerlink:after{
    visibility:visible;
    content:"";
    font-family:FontAwesome;
    display:inline-block}

#content h1:hover .headerlink,#content h2:hover .headerlink,#content h3:hover .headerlink,#content h4:hover .headerlink,#content h5:hover .headerlink,#content h6:hover .headerlink,#content dl dt:hover .headerlink{
    display:inline-block}

#content .sidebar{
    float:right;
    width:40%;
    display:block;
    margin:0 0 24px 24px;
    padding:24px;
    background:#f3f6f6;
    border:solid 1px #e1e4e5}

#content .sidebar p,#content .sidebar ul,#content .sidebar dl{
    font-size:90%}

#content .sidebar .last{
    margin-bottom:0}

#content .sidebar .sidebar-title{
    display:block;
    font-family:"Roboto Slab","ff-tisa-web-pro","Georgia",Arial,sans-serif;
    font-weight:bold;
    background:#e1e4e5;
    padding:6px 12px;
    margin:-24px;
    margin-bottom:24px;
    font-size:100%}

#content .footnote-reference,#content .citation-reference{
    vertical-align:super;
    font-size:90%}

span[id*='MathJax-Span']{
    color:#404040}

.math{
    text-align:center}

#footnotes{
    border-top:1px solid #e1e4e5;
    padding-top: 36px;
}

h2.footnotes{
    display:none;
}

.footnum, .footref{
    color: #2980b9;
    font-size: 170%;
    font-family:"Lato","proxima-nova","Helvetica Neue",Arial,sans-serif;
}

.footnum:before, .footref:before{
    content:"[";
}

.footnum:after, .footref:after{
    content:"]";
}

.footpara {
    color: #999;
    font-size: 90%;
    font-family:"Lato","proxima-nova","Helvetica Neue",Arial,sans-serif;
    padding-bottom: 8px;
    padding-left: 16px;
    padding-right: 16px;
    padding-top: 8px;
    line-height: 1.25em;
    /* display: inline; */
}
.highlight .hll { background-color: #ffffcc }
.highlight  { background: #f8f8f8; }
.highlight .c { color: #8f5902; font-style: italic } /* Comment */
.highlight .err { color: #a40000; border: 1px solid #ef2929 } /* Error */
.highlight .g { color: #000000 } /* Generic */
.highlight .k { color: #204a87; font-weight: bold } /* Keyword */
.highlight .l { color: #000000 } /* Literal */
.highlight .n { color: #000000 } /* Name */
.highlight .o { color: #ce5c00; font-weight: bold } /* Operator */
.highlight .x { color: #000000 } /* Other */
.highlight .p { color: #000000; font-weight: bold } /* Punctuation */
.highlight .ch { color: #8f5902; font-style: italic } /* Comment.Hashbang */
.highlight .cm { color: #8f5902; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #8f5902; font-style: italic } /* Comment.Preproc */
.highlight .cpf { color: #8f5902; font-style: italic } /* Comment.PreprocFile */
.highlight .c1 { color: #8f5902; font-style: italic } /* Comment.Single */
.highlight .cs { color: #8f5902; font-style: italic } /* Comment.Special */
.highlight .gd { color: #a40000 } /* Generic.Deleted */
.highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */
.highlight .gr { color: #ef2929 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #00A000 } /* Generic.Inserted */
.highlight .go { color: #000000; font-style: italic } /* Generic.Output */
.highlight .gp { color: #8f5902 } /* Generic.Prompt */
.highlight .gs { color: #000000; font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #a40000; font-weight: bold } /* Generic.Traceback */
.highlight .kc { color: #204a87; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #204a87; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #204a87; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #204a87; font-weight: bold } /* Keyword.Pseudo */
.highlight .kr { color: #204a87; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #204a87; font-weight: bold } /* Keyword.Type */
.highlight .ld { color: #000000 } /* Literal.Date */
.highlight .m { color: #0000cf; font-weight: bold } /* Literal.Number */
.highlight .s { color: #4e9a06 } /* Literal.String */
.highlight .na { color: #c4a000 } /* Name.Attribute */
.highlight .nb { color: #204a87 } /* Name.Builtin */
.highlight .nc { color: #000000 } /* Name.Class */
.highlight .no { color: #000000 } /* Name.Constant */
.highlight .nd { color: #5c35cc; font-weight: bold } /* Name.Decorator */
.highlight .ni { color: #ce5c00 } /* Name.Entity */
.highlight .ne { color: #cc0000; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #000000 } /* Name.Function */
.highlight .nl { color: #f57900 } /* Name.Label */
.highlight .nn { color: #000000 } /* Name.Namespace */
.highlight .nx { color: #000000 } /* Name.Other */
.highlight .py { color: #000000 } /* Name.Property */
.highlight .nt { color: #204a87; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #000000 } /* Name.Variable */
.highlight .ow { color: #204a87; font-weight: bold } /* Operator.Word */
.highlight .w { color: #f8f8f8; text-decoration: underline } /* Text.Whitespace */
.highlight .mb { color: #0000cf; font-weight: bold } /* Literal.Number.Bin */
.highlight .mf { color: #0000cf; font-weight: bold } /* Literal.Number.Float */
.highlight .mh { color: #0000cf; font-weight: bold } /* Literal.Number.Hex */
.highlight .mi { color: #0000cf; font-weight: bold } /* Literal.Number.Integer */
.highlight .mo { color: #0000cf; font-weight: bold } /* Literal.Number.Oct */
.highlight .sb { color: #4e9a06 } /* Literal.String.Backtick */
.highlight .sc { color: #4e9a06 } /* Literal.String.Char */
.highlight .sd { color: #8f5902; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #4e9a06 } /* Literal.String.Double */
.highlight .se { color: #4e9a06 } /* Literal.String.Escape */
.highlight .sh { color: #4e9a06 } /* Literal.String.Heredoc */
.highlight .si { color: #4e9a06 } /* Literal.String.Interpol */
.highlight .sx { color: #4e9a06 } /* Literal.String.Other */
.highlight .sr { color: #4e9a06 } /* Literal.String.Regex */
.highlight .s1 { color: #4e9a06 } /* Literal.String.Single */
.highlight .ss { color: #4e9a06 } /* Literal.String.Symbol */
.highlight .bp { color: #3465a4 } /* Name.Builtin.Pseudo */
.highlight .vc { color: #000000 } /* Name.Variable.Class */
.highlight .vg { color: #000000 } /* Name.Variable.Global */
.highlight .vi { color: #000000 } /* Name.Variable.Instance */
.highlight .il { color: #0000cf; font-weight: bold } /* Literal.Number.Integer.Long */
</style>
</head>
<body>
<div id="content">
<header>
<h1 class="title">bash编程123</h1>
</header><nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">1. 前言</a></li>
<li><a href="#orgheadline4">2. 简单的python脚本演示</a>
<ul>
<li><a href="#orgheadline2">2.1. python脚本成为系统命令</a></li>
<li><a href="#orgheadline3">2.2. 更加成熟的python脚本管理</a></li>
</ul>
</li>
<li><a href="#orgheadline7">3. 什么是bash shell</a>
<ul>
<li><a href="#orgheadline5">3.1. 管道</a></li>
<li><a href="#orgheadline6">3.2. 重定向</a></li>
</ul>
</li>
<li><a href="#orgheadline22">4. shell基本命令</a>
<ul>
<li><a href="#orgheadline9">4.1. ls</a>
<ul>
<li><a href="#orgheadline8">4.1.1. ls命令-l选项详解</a></li>
</ul>
</li>
<li><a href="#orgheadline10">4.2. clear</a></li>
<li><a href="#orgheadline11">4.3. pwd</a></li>
<li><a href="#orgheadline12">4.4. mkdir</a></li>
<li><a href="#orgheadline13">4.5. rmdir</a></li>
<li><a href="#orgheadline14">4.6. cd</a></li>
<li><a href="#orgheadline15">4.7. rm</a></li>
<li><a href="#orgheadline16">4.8. cp</a></li>
<li><a href="#orgheadline17">4.9. mv</a></li>
<li><a href="#orgheadline19">4.10. cat</a>
<ul>
<li><a href="#orgheadline18">4.10.1. 所有文件合并到一起</a></li>
</ul>
</li>
<li><a href="#orgheadline20">4.11. sort命令</a></li>
<li><a href="#orgheadline21">4.12. more or less</a></li>
</ul>
</li>
<li><a href="#orgheadline46">5. 更多更多的命令</a>
<ul>
<li><a href="#orgheadline23">5.1. uname命令</a></li>
<li><a href="#orgheadline24">5.2. whoami命令</a></li>
<li><a href="#orgheadline26">5.3. date命令</a>
<ul>
<li><a href="#orgheadline25">5.3.1. date返回日期字符</a></li>
</ul>
</li>
<li><a href="#orgheadline27">5.4. basename命令</a></li>
<li><a href="#orgheadline28">5.5. df命令</a></li>
<li><a href="#orgheadline29">5.6. free命令</a></li>
<li><a href="#orgheadline30">5.7. logname命令</a></li>
<li><a href="#orgheadline31">5.8. file命令</a></li>
<li><a href="#orgheadline32">5.9. host命令</a></li>
<li><a href="#orgheadline33">5.10. ping命令</a></li>
<li><a href="#orgheadline34">5.11. ps命令</a></li>
<li><a href="#orgheadline35">5.12. 关机命令shutdown</a></li>
<li><a href="#orgheadline36">5.13. touch</a></li>
<li><a href="#orgheadline37">5.14. which命令</a></li>
<li><a href="#orgheadline38">5.15. chmod命令</a></li>
<li><a href="#orgheadline39">5.16. chown命令</a></li>
<li><a href="#orgheadline40">5.17. sleep命令</a></li>
<li><a href="#orgheadline41">5.18. wc命令</a></li>
<li><a href="#orgheadline42">5.19. passwd命令</a></li>
<li><a href="#orgheadline43">5.20. cal命令}</a></li>
<li><a href="#orgheadline44">5.21. arch命令</a></li>
<li><a href="#orgheadline45">5.22. bc命令</a></li>
</ul>
</li>
<li><a href="#orgheadline60">6. shell脚本入门</a>
<ul>
<li><a href="#orgheadline51">6.1. 变量声明</a>
<ul>
<li><a href="#orgheadline47">6.1.1. 一般赋值和引用</a></li>
<li><a href="#orgheadline49">6.1.2. export命令</a>
<ul>
<li><a href="#orgheadline48">6.1.2.1. 应用：把终端前缀去掉</a></li>
</ul>
</li>
<li><a href="#orgheadline50">6.1.3. declare命令</a></li>
</ul>
</li>
<li><a href="#orgheadline52">6.2. echo命令</a></li>
<li><a href="#orgheadline53">6.3. read命令</a></li>
<li><a href="#orgheadline55">6.4. 流程控制之条件语句</a>
<ul>
<li><a href="#orgheadline54">6.4.1. 应用：确认某个文件夹是不是存在</a></li>
</ul>
</li>
<li><a href="#orgheadline59">6.5. for循环</a>
<ul>
<li><a href="#orgheadline56">6.5.1. 应用：小数点递加输出流</a></li>
<li><a href="#orgheadline57">6.5.2. 应用：批量创建文件</a></li>
<li><a href="#orgheadline58">6.5.3. 应用：批量缩小图片大小</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgheadline61">7. 参考资料</a></li>
</ul>
</div>
</nav>

<div class="outline-2">
<h2 id="orgheadline1">前言</h2>
<div class="outline-text-2" id="text-1">
<p>
因为有高级脚本编程语言了，所以不会专门钻研bash编程了，不过一些基础的东西还是要熟悉掌握的。高级编程语言比如说python，有时也是需要用subprocess模块来执行简单的一行bash命令来完成某些任务，还有Qt程序同样有时需要用QProcess来完成某些任务。
</p>
</div>
</div>
<div class="outline-2">
<h2 id="orgheadline4">简单的python脚本演示</h2>
<div class="outline-text-2" id="text-2">
<p>
下面我们将编写一个小的python脚本，用os模块的stat函数来获取文件的大小，然后将其转换成为KB，MB或者GB这样的形式。
</p>

<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">filename</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">filesize</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">stat</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">st_size</span>

<span class="k">for</span> <span class="n">unit</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;字节&#39;</span><span class="p">,</span><span class="s1">&#39;KB&#39;</span><span class="p">,</span><span class="s1">&#39;MB&#39;</span><span class="p">,</span><span class="s1">&#39;GB&#39;</span><span class="p">,</span><span class="s1">&#39;TB&#39;</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">filesize</span> <span class="o">&gt;</span> <span class="mi">1024</span><span class="p">:</span>
        <span class="n">filesize</span> <span class="o">=</span> <span class="n">filesize</span><span class="o">/</span><span class="mi">1024</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">break</span>

<span class="k">print</span><span class="p">(</span><span class="n">filename</span> <span class="o">+</span> <span class="s1">&#39;大小是&#39;</span> <span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">filesize</span><span class="p">))</span> <span class="o">+</span> <span class="n">unit</span><span class="p">)</span>
</pre></div>

<p>
具体的运行如下所示：
</p>
<pre>
=&gt;python3 filesize.py 鸟哥的linux私房菜.pdf
鸟哥的linux私房菜.pdf大小是22MB
</pre>

<p>
关于上面数字大小具体说明如下：在计算机中存储的只有0和1这样的数字，其中0和1占了一位(bit)。然后所谓的一字节(B)是8个数字位(bit)，比如说python程序里面有一个bytes类型，就是指的一字节的意思。然后后面的KB，MB，GB，TB都是在这个字节单位的基础上的，比如1KB=1024B，1MB=1024KB&#x2026;。
</p>

<p>
上面我们用os模块的stat函数查看文件属性，其中的st_size返回的就是文件的大小，其单位就是字节(B)。
</p>
</div>


<div class="outline-3">
<h3 id="orgheadline2">python脚本成为系统命令</h3>
<div class="outline-text-3" id="text-2-1">
<p>
这样的脚本没啥意思，让我们将其装入系统中从而成为一个可以使用的命令吧。先把文件名改为filesize，当然首先要确认你的Linux系统没有这个命令，然后用pip来安装这个脚本吧，安装过程很简单，就是新建一个setup.py文件，内容简单写为如下：
</p>
<div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>

<span class="n">setup</span><span class="p">(</span>
  <span class="n">name</span><span class="o">=</span><span class="s1">&#39;filesize&#39;</span><span class="p">,</span>
  <span class="n">version</span><span class="o">=</span><span class="s1">&#39;0.01&#39;</span><span class="p">,</span>
  <span class="n">description</span><span class="o">=</span><span class="s1">&#39;return filesize&#39;</span><span class="p">,</span>
  <span class="n">author</span><span class="o">=</span><span class="s1">&#39;wanze&#39;</span><span class="p">,</span>
  <span class="n">author_email</span><span class="o">=</span><span class="s1">&#39;a358003542@gmail.com&#39;</span><span class="p">,</span>
  <span class="n">license</span><span class="o">=</span><span class="s1">&#39;GPL 2&#39;</span><span class="p">,</span>
  <span class="n">scripts</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;filesize&#39;</span><span class="p">]</span>
<span class="p">)</span>
</pre></div>


<p>
然后运行命令：
</p>
<div class="highlight"><pre><span></span>sudo python3 setup.py install
</pre></div>

<p>
这个时候你的Linux就多了一个你自己定义的命令了，具体使用情况如下所示：
</p>
<pre>
=&gt;filesize unix编程艺术.pdf
unix编程艺术.pdf 大小是 23.56 MB
</pre>


<p>
但是就算我们要写一个非常粗糙非常粗糙的Linux命令行脚本，也别忘了两个选项， <code>--help</code> 和 <code>--version</code> ，当然出于简单的目的你可以不用考虑其他更加复杂的选项，但这两个选项都没有的命令会让人很失望的。
</p>

<p>
现在我们的filesize的python小脚本第二版是这个样子了：
</p>
<div class="highlight"><pre><span></span><span class="ch">#!/usr/bin/env python3</span>
<span class="c1">#-*-coding:utf-8-*-</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">getopt</span>

<span class="n">__softname__</span> <span class="o">=</span> <span class="s1">&#39;filesize&#39;</span>
<span class="n">__version__</span> <span class="o">=</span> <span class="s1">&#39;0.01&#39;</span>
<span class="k">def</span> <span class="nf">show_usage</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;usage: filesize [option] [filename]</span>
<span class="s1">-V    :  print the version number and exit(also --version)</span>
<span class="s1">-h    :  print this help message and exit(also --help)</span>
<span class="s1">&#39;&#39;&#39;</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">opts</span> <span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="o">.</span><span class="n">getopt</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span><span class="s2">&quot;hV&quot;</span><span class="p">,[</span><span class="s2">&quot;help&quot;</span><span class="p">,</span><span class="s2">&quot;version&quot;</span><span class="p">])</span>
<span class="k">except</span> <span class="n">getopt</span><span class="o">.</span><span class="n">GetoptError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="n">show_usage</span><span class="p">()</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">for</span> <span class="n">o</span> <span class="p">,</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">o</span> <span class="ow">in</span> <span class="p">(</span><span class="s1">&#39;-V&#39;</span><span class="p">,</span><span class="s1">&#39;--version&#39;</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="n">__softname__</span> <span class="p">,</span> <span class="n">__version__</span><span class="p">)</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
    <span class="k">elif</span> <span class="n">o</span> <span class="ow">in</span> <span class="p">(</span><span class="s1">&#39;-h&#39;</span><span class="p">,</span><span class="s1">&#39;--help&#39;</span><span class="p">):</span>
        <span class="n">show_usage</span><span class="p">()</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">assert</span> <span class="bp">False</span><span class="p">,</span> <span class="s2">&quot;unhandle option&quot;</span>

<span class="n">filename</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">filesize</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">stat</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">st_size</span>
<span class="k">for</span> <span class="n">unit</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;字节&#39;</span><span class="p">,</span><span class="s1">&#39;KB&#39;</span><span class="p">,</span><span class="s1">&#39;MB&#39;</span><span class="p">,</span><span class="s1">&#39;GB&#39;</span><span class="p">,</span><span class="s1">&#39;TB&#39;</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">filesize</span> <span class="o">&gt;</span> <span class="mi">1024</span><span class="p">:</span>
        <span class="n">filesize</span> <span class="o">=</span> <span class="n">filesize</span><span class="o">/</span><span class="mi">1024</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">break</span>

<span class="k">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%s</span><span class="s1"> 大小是 </span><span class="si">%.2f</span><span class="s1"> </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">filesize</span><span class="p">,</span><span class="n">unit</span><span class="p">))</span>
</pre></div>

<p>
然后运行情况如下所示：
</p>
<pre>
=&gt;filesize --version
filesize 0.01
=&gt;filesize --help
usage: filesize [option] [filename]
-V    :  print the version number and exit(also --version)
-h    :  print this help message and exit(also --help)

=&gt;filesize 鸟哥的linux私房菜.pdf
鸟哥的linux私房菜.pdf 大小是 22.05 MB
</pre>

<p>
恩，似乎有那么一点样子了。这里主要就python中的getopt模块稍作讨论。这个模块里的getopt函数根据sys.argv[1:]，也就是接收到的除了本文件名后面的所有的内容，开始分析和过滤操作，并将分析结果传递给opts和args这两个变量。然后这个函数第二个参数是控制短选项的，比如这里填的hV，对应的就是 <code>-h</code> 和 <code>-V</code> ，然后第三个参数是控制长选项的，这里就是 <code>--help</code> 和 <code>--version</code> 。然后短选项哪里如果某个字母后面跟一个冒号，比如 <code>i:</code> ，那么你输入 <code>-i what</code> 就将刷进去，opts的结构如下[('-i','what')]，这样我们看到后面对opts进行迭代操作具体就是将前面的选项和后面的参数提出来了。
</p>

<p>
更多详细的内容请参与getopt模块的<a href="https://docs.python.org/3/library/getopt.html#module-getopt">getopt官方文档</a> 。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline3">更加成熟的python脚本管理</h3>
<div class="outline-text-3" id="text-2-2">
<p>
更加成熟的python脚本管理是类似 <a href="https://github.com/a358003542/skeleton">这个项目</a> 做的在setup.py文件中不要使用scripts，而是使用entry_points参数做自动生成系统可执行脚本，这样的方法可以设置多个程序入口，而且你写的模块里面的函数和类将很方便为其他python脚本调用。
</p>
</div>
</div>
</div>


<div class="outline-2">
<h2 id="orgheadline7">什么是bash shell</h2>
<div class="outline-text-2" id="text-3">
<p>
shell就好像一个包装层，在shell的里面就是Linux操作系统的核心kernel，如果你要深入进去，将会遇到另外一个更加艰深的领域，比如计算机硬件啊，驱动程式啊还有Linux系统的设计核心等等之类的，这些知识都比较专业了，一般的人是不需要深究的。
</p>

<p>
Shell是提供操作系统核心（称为kernel）与用户之间交互的特殊程序，参见下图。这个kernel在启动时被装入内存,并管理系统直到关机为止。它负责建立和控制进程，管理内存、文件系统、通信等等。其他的实用程序，包括Shell在内都存储在硬盘上。kernel把程序从硬盘中装入内存，运行它们,并在程序运行结束后回收被程序占用的系统资源。Shell 是从你登录就开始运行的实用程序，它允许用户通过 Shell 脚本或者命令行的方式输入命令，并通过翻译这些命令完成用户与kernel的交互<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> 。
</p>


<figure>
<p><img src="images/kernel和shell.png" alt="kernel和shell.png">
</p>
<figcaption><span class="figure-number">Figure 1:</span> kernel和shell</figcaption>
</figure>


<p>
目前系统一般用的是Bourne Shell（bash shell），提示符是美元符号$。如果你使用Ubuntu系统，那么默认的就是bash shell，不过就算你使用的是其他Linux变种应该差异也不大，因为现在谁还一本正经的用shell编程啊，shell只是一个桥梁，既然现在出现了这么多很好的高级脚本语言，比如python，实在没必要死守住shell编程了。如果除开各个shell之间编程的语法差异等，可能就我们的使用体验上讲差异应该很小了。
</p>
</div>


<div class="outline-3">
<h3 id="orgheadline5">管道</h3>
<div class="outline-text-3" id="text-3-1">
<p>
在简单介绍了shell的作用之后，具体引入shell是如何解析命令的，然后简单地说明下管道和重定向之类的概念。所谓管道最简单的理解就是第一个shell语句命令的输出流向到另外一个shell语句中取作为输入。比如说你的火狐浏览器卡住了，你需要看一下它的pid然后kill掉，那么可以如下查看：
</p>

<div class="highlight"><pre><span></span>ps aux <span class="p">|</span> grep firefox
</pre></div>

<p>
这个 <code>|</code> 就是所谓的管道概念，这里首先是 <code>ps aux</code> 语句，然后输出送入到grep语句中去，抓取具体包含firefox字符的匹配行。
</p>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline6">重定向</h3>
<div class="outline-text-3" id="text-3-2">
<p>
kernel处理的每一个进程都默认都0，1，2这样三个文件说明符。其中0表示标准输入，1表示标准输出，2表示标准错误输出。
</p>

<p>
当文件说明符被分配给其他非终端，就叫做I/O重定向。Shell通过关闭标准输出，并把标准文件说明符 1（终端）分配给文件，来把输出重新定向给文件。 通过关闭文件说明符0，把它分配给文件，把标准输入重新定向。Bourne Shell通过分配文件说明符2来处理错误。
</p>

<p>
&gt;就表示这样的重定向操作。&gt;&gt;表示文件追加。
</p>

<p>
最简单的重定向应用就是：
</p>
<div class="highlight"><pre><span></span>cat  *.txt  &gt;  test.txt
</pre></div>

<p>
其将本目录下glob抓取到的txt文件都合并成一个字符串流，然后重定向送入到test.txt文件中去。
</p>
</div>
</div>
</div>


<div class="outline-2">
<h2 id="orgheadline22">shell基本命令</h2>
<div class="outline-text-2" id="text-4">
<p>
这里将一些基本的shell指令详细列出来和说明之，可能大部分你都接触过和有所了解，这里是全面的复习和整理。
</p>
</div>

<div class="outline-3">
<h3 id="orgheadline9">ls</h3>
<div class="outline-text-3" id="text-4-1">
<p>
列出当前目录下文件（和文件夹）的信息。
</p>

<pre>
ls
</pre>

<p>
我们已经知道了命令一般都有 <code>--version</code> 和 <code>--help</code> 这两个选项，一个是显示版本信息，一个是显示帮助信息。然后如果我们查看ls的帮助信息的话：
</p>

<pre>
ls --help
</pre>

<p>
我们将会发现里面内容还很丰富，其中最常用的两个选项是 <code>-a</code> 和 <code>-l</code> ，一个是要显示隐藏文件或者隐藏文件夹，一个是显示更多更多的信息。
</p>

<p>
Linux系统最精彩的部分就是管道重定向等概念将各个小的程序小的工具揉合成为一个协作的整体，虽然这里ls命令里面似乎有些选项很精彩，但和以后要讨论和其他工具的协作比起来无疑是不值一提的。比如说
</p>

<pre>
ls *.png
</pre>

<p>
将会把一个文件夹里面的所有后缀是png的文件名字符流扫描出来，这个字符流包含目标文件的文件名然后通过管道来进一步操作。
</p>

<p>
ls的 <code>--sort</code> 选项用来排序，似乎很有用，可以了解一下，但也可以通过管道传递给sort命令来进一步排序操作。如下所示：
</p>

<pre>
ls *.png | sort
</pre>

<p>
ls这里抓取的文件字符流可以方便作为后面的操作，如下所示：
</p>

<pre>
for i in `ls *.jpg | sort` ; do echo $i; done ;
</pre>
<p>
这段代码里面的 <code>$i</code> 就是对应的一个个文件字符流。
</p>
</div>

<div class="outline-4">
<h4 id="orgheadline8">ls命令-l选项详解</h4>
<div class="outline-text-4" id="text-4-1-1">
<p>
现在让我们详细的讲一下 <strong>-l</strong> 选项都列出了文件或文件夹的那些属性，也许我们对Linux系统各个复杂的文件夹系统感到困惑，不过那没必要死记硬背。而对于Linux系统下文件都有那些属性，还有文件名如何表达，还有目录和文件的区别的等等，这些倒很重要我们要弄得很清楚。
</p>

<p>
Linux下的文件和目录或者链接都属于基本的文件概念，只是它们的文件属性不同罢了。比如看下面这个例子：
</p>

<pre>
-rw-rw-r--  1 wanze wanze    41034  8月 27 15:19 wisesystem.xoj
drwxrwxr-x  4 wanze wanze     4096  5月 28 18:50 yEd
lrwxrwxrwx  1 wanze wanze       22  9月 11 18:37 到 git 的链接 -&gt; /home/wanze/桌面/git
</pre>

<p>
后面的是几月几号还有多少时间是具体这个文件所谓的“时间戳”，你修改或者新建或者用 <strong>touch</strong> 命令摸一下那么这个文件的时间戳就会更新到当前的时间。（时间戳有很多用途，比如版本控制，如果时间戳没变那么可以肯定文件没有发生变化那么不需要处理等等。）
</p>

<p>
然后最后一项就是具体的文件名或文件夹名或链接名，日期前面的那个是具体的文件大小，你可以使用 <code>-hl</code> ，也就是选项 <code>-l</code> 和选项 <code>-h</code> 的组合形式，这样这一栏会显示为人更易读的形式。
</p>

<p>
然后第一栏是所谓的文件类型和权限，第三栏的文件所有者，第四栏是文件所属群。目前第二栏意义不明。
</p>

<p>
第一栏文件属性我们可以看到开头“d”表示这个文件是目录，开始“-”表示这个文件是文件，开头“l”表示这个文件是链接。然后后面三个是rwx表示这个文件的所有者对这个文件可读可写可执行，如果要控制其不可执行，那么就要将 这个属性改为rw-；然后接下来三个是这个文件所有者群的权限；然后最后三个是其他人对这个文件拥有的权限。具体要修改文件的权限和所有者的关系请参看后面的chmod命令和chown命令哪里。（还有改变所有群的命令chgrp）
</p>

<p>
简单来说Linux系统就是通过上述的所有者和所有者群以及各自的权限概念来管理系统文件的安全的，比如说这里用户wanze属于wanze群，然后还有root用户属于root群，Linux系统里面基本上系统相关的重要文件都是限定到只有root用户（或者root群？）才具有可写权限，而一般用户在自己的主文件夹里创建的文件的文件属性的所有者是他自己，然后所有群也是他的群，所以他具有可写也就是可以修改文件的权限。一些重要的涉及系统修改的操作我们知道需要使用前面加上sudo来提升权限。
</p>

<p>
well，简单了解下即可，对于个人PC用户来说群的概念多少有点累赘。
</p>
</div>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline10">clear</h3>
<div class="outline-text-3" id="text-4-2">
<p>
clear命令清屏，其实内容没有被清除了，因为gnome-terminal自带的有历史记忆功能和现在的回滚功能。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline11">pwd</h3>
<div class="outline-text-3" id="text-4-3">
<p>
查看当前目录在文件系统中的路径
</p>

<p>
pwd命令的使用就是这样，没有其他选项等等。这里要讲的是Linux系统关于目录的最基本的一些知识。
</p>

<ul class="org-ul">
<li>“/” 根目录 ，文件系统开始的地方</li>
<li>/home/wanze，主文件夹，即特殊的符号“~” ，只在bash中有用。其他程序语言不一定兼容，比如python语言中需要os.path模块的expanduser函数来处理之。</li>
<li>“.“表示当前目录</li>
<li>“..”表示上一级目录，用.和..来表示的目录叫做相对目录，这种表示方式也具有通用性，在某些情况下，比如对于网站中网页的某些资源文件的索引，甚至更为便利。</li>
</ul>

<p>
python中os模块对应的有os.getcwd命令。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline12">mkdir</h3>
<div class="outline-text-3" id="text-4-4">
<p>
mkdir命令，创建一个新的目录文件（如果文件名不存在的话）。
</p>

<p>
用法如下：
</p>
<pre>
mkdir test
mkdir -p test/1/2
</pre>

<ol class="org-ol">
<li>第一个是在当前工作目录创建名为test的文件夹。</li>
<li>第二个是创建一个完整的多层目录结构，即使本目录或上层目录已存在也不会返回错误。</li>
</ol>

<p>
python的os模块有os.mkdir等命令来对应shell的这个命令。
</p>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline13">rmdir</h3>
<div class="outline-text-3" id="text-4-5">
<p>
rmdir命令，删除一个目录文件。
</p>
<pre>
rmdir test
rmdir test/1/2
rmdir -p test/1/2
</pre>

<ol class="org-ol">
<li>在当前目录删除test（比如是空的）文件夹</li>
<li>删除test文件夹里面1文件夹的最后一个空文件夹2。</li>
<li>删除一个多层目录（如果都是空的）</li>
</ol>

<p>
这里使用 <code>-p</code> 选项之后test，1和2文件夹都是空的，才会都被删除，从最末端的文件夹开始遍历，如果遇到某个文件夹不是空的，那么删除操作停止，之前末端那些空文件夹还是被删除了。
</p>

<p>
python的os模块有os.rmdir命令还有shutil模块的rmtree命令来对应shell的这个命令。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline14">cd</h3>
<div class="outline-text-3" id="text-4-6">
<p>
改变当前的工作目录，默认回到个人的主文件夹。
</p>

<pre>
cd [dir]
</pre>

<p>
这里的[dir]表示待掉转的目录地址，相对目录表示或者绝对目录表示等都是可以的，不带参数默认是“~”，也就是用户的主文件夹。
</p>

<p>
python的os模块有os.chdir函数与之对应。
</p>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline15">rm</h3>
<div class="outline-text-3" id="text-4-7">
<p>
rm命令，主要用于删除文件，不可以删除链接文件，跟 <code>-r</code> 选项之后，可以递归删除整个目录。
</p>

<p>
一些常见的选项如下：
</p>

<ul class="org-ul">
<li><code>-f</code> 强制删除，忽略不存在的文件，不提示确认。</li>
<li><code>-i</code> 在每个文件删除前都请求确认。</li>
<li><code>-I</code> 删除超过三个文件或递归删除前要求确认。</li>
<li><code>-r</code> 递归删除目录和里面的所有内容。</li>
</ul>

<p>
要删除第一个字符是“-”的文件请使用如下方法：
</p>

<pre>
rm ./-foo.txt
</pre>

<p>
值得一提的是，被rm命令删除的文件在回收站里都是找不到的，所以使用这个命令之前你比如明确自己在删些什么文件，加上 <code>-i</code> 或 <code>-I</code> 选项是一个不错的习惯。
</p>

<p>
python中os模块有os.remove函数与之对应。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline16">cp</h3>
<div class="outline-text-3" id="text-4-8">
<p>
cp有两种用法，第一种用法是将当前目录下的某个文件复制成当前目录下的另一个文件。
</p>
<pre>
cp [选项] 原文件名 新文件名
</pre>


<p>
第二种用法是将原文件复制到目标目录中。
</p>
<pre>
cp [选项] 原文件名  目标目录路径
</pre>

<p>
以上两种用法如果加上 <code>-r</code> 选项，那么所谓的目标文件此时指的就是目录文件，操作和上面的rm命令类似是之于整个目录的。cp在使用上选项挺多的，这里略过了。
</p>

<p>
python中复制文件推荐使用shutil模块的copyfile函数，或者copy或copy2函数；复制整个文件推荐shutil模块的copytree函数。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline17">mv</h3>
<div class="outline-text-3" id="text-4-9">
<p>
mv命令虽然是move单词的缩写，和cp命令的使用方法有点类似，也分为两种情况：第一种情况是将原文件移动到原目录位置，这时mv命令更准确的描述是重命名命令，而且我们看到不需要使用“-r”就可以直接对目标目录重命名。
</p>

<pre>
mv [选项]  原文件名  新文件名
</pre>


<p>
第二种情况倒是和move移动这个单词所描述的很接近，值得提醒的是对于目录文件（整个目录）是不需要“-r”选项的。
</p>

<pre>
mv [选项]  原文件名  目标目录路径
</pre>

<p>
常用的选项如下，意义都是很清晰的：
</p>

<ul class="org-ul">
<li><code>-f</code> 覆盖前不询问</li>
<li><code>-i</code> 覆盖前询问</li>
<li><code>-n</code> 不覆盖已存在文件</li>
</ul>

<p>
python中shutil模块的move函数与之对应。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline19">cat</h3>
<div class="outline-text-3" id="text-4-10">
<p>
cat命令简单的用法就是：
</p>
<pre>
cat test.txt
</pre>

<p>
来查看某个文本文件的内容，但cat命令来自英文单词(concatenate)，这个英文单词通用意思是联接，延伸到计算机领域现在这个单词的意思就是指将两个字符联接成一个。这里cat命令的具体功能就是将两个或者更多的字符流文件联接成为一个字符流，默认是显示到终端上，你可以通过重定向将这个字符流流向某个文件从而保存起来。
</p>

<p>
下面是cat命令的一个小应用：
</p>
</div>

<div class="outline-4">
<h4 id="orgheadline18">所有文件合并到一起</h4>
<div class="outline-text-4" id="text-4-10-1">
<div class="highlight"><pre><span></span>cat  *  &gt;  test.txt
</pre></div>

<p>
这个命令就是把这个文件夹里面所有的文件都合并成为一个文件，新文件的文件名就是"test.txt"，这个文件名随意，你可以取个好听点的名字。
</p>

<p>
“cat  * ”这个命令并没有什么神奇之处，神奇的是Linux终端对于文件glob操作对于*（任意数目的任意字符）和?（一个任意字符）的支持。具体你可以用 “echo  *” 命令来查看一下。
</p>
</div>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline20">sort命令</h3>
<div class="outline-text-3" id="text-4-11">
<p>
sort命令和cat命令一样接受一系列的字符流文件，然后对它们进行排序操作，然后默认输出到终端显示排序之后的结果。但一般sort的用法主要是通过管道接受一连串的字符流，然后对这些字符流中的字符进行排序操作。
</p>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline21">more or less</h3>
<div class="outline-text-3" id="text-4-12">
<p>
more和less命令有点类似，然后有点小差异。它们常用来接受管道传过来的字符流信息好美化显示。
</p>


<p>
虽然less说是more的加强版，但我注意到似乎less并不一定是最好的选择，因为less在某些符号（具体原因不明）的显示会出现奇怪的东西，然后more似乎处理得更好一些。
</p>
</div>
</div>
</div>


<div class="outline-2">
<h2 id="orgheadline46">更多更多的命令</h2>
<div class="outline-text-2" id="text-5">
<p>
这一章将在上一章的基础上继续shell的一些常用指令的介绍，不过和前一章不同，前一章的一些Linux指令实在是太基本了，最好记熟。这一章的这些指令并没有这样的要求了，随便了解下即可。
</p>
</div>

<div class="outline-3">
<h3 id="orgheadline23">uname命令</h3>
<div class="outline-text-3" id="text-5-1">
<p>
uname，你的名字，这个命令输入之后简单的返回Linux字符串，似乎用处不大。不过通过查看uname命令的帮助信息我们可以得知这个命令能够返回关于你目前电脑的操作系统，硬件架构，内核版本号等等重要信息，这些在程序多平台支持中是很重要的信息。
</p>

<p>
下面是一些测试例子：
</p>
<pre>
=&gt;uname -s #内核名字
Linux
=&gt;uname -n #主机名字
wanze-ubuntu
=&gt;uname -r #内核发行号
3.13.0-36-generic
=&gt;uname -m #硬件架构
i686
=&gt;uname -p #处理器类型
i686
=&gt;uname -i #硬件平台
i686
=&gt;uname -o #操作系统名字
GNU/Linux
</pre>

<p>
然后通过 <code>-a</code> 选项可以返回基于上面信息的综合信息，这里忽略了。此外还有一个信息 <code>-v</code> 返回内核版本号，信息有点复杂，就不来烦扰读者了。
</p>

<p>
当然如上面的纯粹看这些信息的命令用处不大，你可以通过 <code>` `</code> （Esc键下面那个符号，不清楚叫什么名字）来包围一段shell命令，这段命令的返回值你可以赋值给其他变量（ <em>注意</em> ：shell脚本里面赋值的等号两边都不能加上空格。），然后你可以通过 <code>echo</code> 命令来查看一下。
</p>
<div class="highlight"><pre><span></span><span class="nv">machine</span><span class="o">=</span><span class="sb">`</span>uname -m<span class="sb">`</span><span class="p">;</span> <span class="nb">echo</span> <span class="nv">$machine</span>
</pre></div>

<p>
当然最好还是用python语言的os或者platform模块里面的函数，更具跨平台性。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline24">whoami命令</h3>
<div class="outline-text-3" id="text-5-2">
<p>
whoami返回的是你的名字，命令的使用就这么简单。
</p>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline26">date命令</h3>
<div class="outline-text-3" id="text-5-3">
<p>
date命令显示日期和时间，如果你用 <code>--help</code> 查看帮助信息会发现很多选项设置。这里暂时先略过，具体到某些shell编程问题，date命令会很有用的，那时你可能要好好研究下那些繁杂的输出格式控制参数了。
</p>

<p>
在python中有time或者datetime模块来解决相关时期和时间的问题。
</p>
</div>

<div class="outline-4">
<h4 id="orgheadline25">date返回日期字符</h4>
<div class="outline-text-4" id="text-5-3-1">
<p>
date命令返回某个特定格式的日期在某些shell脚本中很有用，如下所示就是一个简单的例子：
</p>

<p>
前面谈到 <code>` `</code> 里面的shell命令会被执行，然后输出可以作为另外一个变量的值，不过一般推荐是采用 <code>$(date)</code> 这样的形式<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> ： 
</p>
<div class="highlight"><pre><span></span><span class="nv">date</span><span class="o">=</span><span class="k">$(</span>date +<span class="s2">&quot;%F_%R&quot;</span><span class="k">)</span><span class="p">;</span><span class="nb">echo</span> <span class="nv">$date</span>
</pre></div>
</div>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline27">basename命令</h3>
<div class="outline-text-3" id="text-5-4">
<p>
basename命令和python中的os.path模块中的basename函数很相似，具体请读者用 <code>--help</code> 来查看用法，已经说的再清晰不过了。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline28">df命令</h3>
<div class="outline-text-3" id="text-5-5">
<p>
df命令的功能是显示文件系统中各个硬盘分区<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> 的详细信息（已挂载）。
</p>

<p>
推荐加上 <code>-h</code> ，适合人类阅读的格式输出。。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline29">free命令</h3>
<div class="outline-text-3" id="text-5-6">
<p>
free命令，显示当前内存的使用情况，同样推荐使用 <code>-h</code> 选项来增强易读性。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline30">logname命令</h3>
<div class="outline-text-3" id="text-5-7">
<p>
logname命令，显示当前登录的用户名。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline31">file命令</h3>
<div class="outline-text-3" id="text-5-8">
<p>
file命令
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline32">host命令</h3>
<div class="outline-text-3" id="text-5-9">
<p>
host命令
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline33">ping命令</h3>
</div>


<div class="outline-3">
<h3 id="orgheadline34">ps命令</h3>
<div class="outline-text-3" id="text-5-11">
<p>
ps是查看系统正在运行的进程的命令，用法就是：
</p>
<pre>
ps [option]
</pre>

<p>
有的时候某个进程卡住了，一般运行 <code>ps aux</code> 来查看那个进程的进程号（PID），然后kill（kill命令，杀死某个进程。）就行了。
</p>

<p>
ps命令有很多选项，可以略过讨论了。
</p>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline35">关机命令shutdown</h3>
<div class="outline-text-3" id="text-5-12">
<p>
一般运行指令如下：
</p>

<pre>
sudo shutdown -r now #立即重新启动
sudo shutdown -P +30 #30分钟后关机
sudo shutdown -P 23:30 #23:30的时候关机
sudo shutdown -c #取消正在运行的shutdown命令
</pre>


<p>
取消shutdown命令，对于当前那个终端，常规的Ctrl+C终止程序也是可行的。
</p>

<p>
shutdown命令的 <code>-h</code> 选项是挂起或者power off也就是通常意义上的关机，对于个人用户来说一般都是 <code>-P</code> 关机吧，再说目前Linux系统对于笔记本的挂起处理的还是不太好。
</p>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline36">touch</h3>
<div class="outline-text-3" id="text-5-13">
<p>
用法：touch [选项] 文件
</p>

<p>
将每个文件的访问时间和修改时间改为当前时间。
</p>

<p>
不存在的文件将会被创建为空文件，除非使用-c或-h选项。
</p>


<pre>
touch Readme.txt
</pre>

<ul class="org-ul">
<li>-a 只更改访问时间</li>
<li>-c 不创建文件</li>
<li>-m 只更改修改</li>
<li>-h 会影响符号链接本身，而非符号链接所指示的目的地。时间</li>
</ul>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline37">which命令</h3>
<div class="outline-text-3" id="text-5-14">
<p>
which命令，返回shell里面可执行命令所在的路径。
</p>
<pre>
=&gt;which ls
/bin/ls
=&gt;which python
/usr/bin/python
=&gt;which timer.py
/usr/local/bin/timer.py
</pre>

<p>
从这里我们看到，一般系统重要的命令都放入 <code>/bin/</code> 这个文件夹里面，然后其他命令等放入 <code>/usr/bin/</code> 这个文件夹里面，然后用户自己定义的一些命令推荐放入 <code>/usr/local/bin/</code> 这个文件夹里面。
</p>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline38">chmod命令</h3>
<div class="outline-text-3" id="text-5-15">
<p>
改变文件（包括目录链接等）的权限。用法是：
</p>
<div class="highlight"><pre><span></span>chmod  a+x filename
</pre></div>

<p>
这里的权限有 <strong>r</strong> ead、 <strong>w</strong> rite、执行( <strong>x</strong> )。上面的 <strong>a</strong> 表示all，除此之外还有， <strong>u</strong> ser（所有者）， <strong>g</strong> roup（所有群）和 <strong>o</strong> thers（其他用户）。 <strong>+</strong> 或者 <strong>-</strong> 表示加权限或者减权限（此外还有 <strong>=</strong> 即设定某个值的意思）。具体这些术语的意义在之前的ls命令中已有所说明。
</p>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline39">chown命令</h3>
<div class="outline-text-3" id="text-5-16">
<p>
改变文件的所有者。用法是：
</p>
<div class="highlight"><pre><span></span>chown  ownername filename
</pre></div>

<p>
此外还有chgrp命令，改变文件的所有群。chmod，chown，chgrp对于某些文件属性修改可能需要sudo提升权限，然后它们都可以接受选项 <code>-R</code> 来递归修改该目录和目录下所谓文件的文件属性。chgrp命令使用格式和chown命令类似，简单的使用如上，不同的是ownername换成groupname。
</p>
</div>
</div>



<div class="outline-3">
<h3 id="orgheadline40">sleep命令</h3>
<div class="outline-text-3" id="text-5-17">
<p>
主要在bash脚本中使用，将某个程序挂起多少时间（秒）。
</p>
</div>
</div>



<div class="outline-3">
<h3 id="orgheadline41">wc命令</h3>
<div class="outline-text-3" id="text-5-18">
<p>
统计英文的单词数等
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline42">passwd命令</h3>
<div class="outline-text-3" id="text-5-19">
<p>
一般的用法就是修改当前用户的密码。
</p>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline43">cal命令}</h3>
<div class="outline-text-3" id="text-5-20">
<p>
打印日历。似乎只是好玩，但也许有用？
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline44">arch命令</h3>
<div class="outline-text-3" id="text-5-21">
<p>
arch命令，这个命令完全可被uname命令取代。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline45">bc命令</h3>
<div class="outline-text-3" id="text-5-22">
<p>
一个小型的无限精度的计算器，
</p>
</div>
</div>
</div>




<div class="outline-2">
<h2 id="orgheadline60">shell脚本入门</h2>
<div class="outline-text-2" id="text-6">
<p>
shell脚本前面不知不觉就谈过一些了，下面继续完整讨论一些基本的东西，点到为止。
</p>
</div>

<div class="outline-3">
<h3 id="orgheadline51">变量声明</h3>
<div class="outline-text-3" id="text-6-1">
</div><div class="outline-4">
<h4 id="orgheadline47">一般赋值和引用</h4>
<div class="outline-text-4" id="text-6-1-1">
<div class="highlight"><pre><span></span><span class="nv">i</span><span class="o">=</span>2
<span class="nb">echo</span> <span class="nv">$i</span>
</pre></div>

<p>
一般赋值就如上所示，和其他编程语言变量赋值大体类似吧，但是要特别注意变量和值之间的等号是相连的，不能用空格隔开。变量的符号一般就是字母数字，有的时候加上下划线。这样声明的变量为局部变量，也就是本shell中适用。如果要创建全局变量（）需要使用export命令。
</p>

<p>
一般引用就是在前面加上 <code>$</code> 符号，如果你需要用变量的字符和其他字符组合成一个新的字符，那么需要用花括号将变量名包围起来。即这样的形式 <code>${i}what</code> 。
</p>
</div>
</div>

<div class="outline-4">
<h4 id="orgheadline49">export命令</h4>
<div class="outline-text-4" id="text-6-1-2">
<div class="highlight"><pre><span></span><span class="nb">export</span>  i
</pre></div>

<p>
利用export命令就可以将这个变量变为全局变量（这里所谓的全局变量主要指子shell继承了父shell的变量。），这样所有的shell脚本都可以通用。可以使用选项 <code>-n</code> 来将导出的全局变量转换为局部变量。还有可选项 <code>-p</code> 列出所有全局变量。我们可以看到变量声明的另外一种方法，使用declare命令。
</p>
</div>


<div class="outline-5">
<h5 id="orgheadline48">应用：把终端前缀去掉</h5>
<div class="outline-text-5" id="text-6-1-2-1">
<p>
运行下面的命令：
</p>
<div class="highlight"><pre><span></span><span class="nb">export</span> <span class="nv">PS1</span><span class="o">=</span><span class="s1">&#39;=&gt;&#39;</span>
</pre></div>

<p>
这样终端的前缀（前面的一些提示信息）就可以简单化为=&gt;&#x2026;这样的形式了。这样可以节省屏幕空间。你可以用pwd命令查看一下，其他一切都没有影响的。
</p>

<p>
这个PS1就对应的终端的一级前缀符号，PS2对应的是进一步输入时候的提示符号。你可以换成这样的形式：
</p>
<div class="highlight"><pre><span></span><span class="nb">export</span> <span class="nv">PS2</span><span class="o">=</span><span class="s1">&#39;&gt; &#39;</span>
</pre></div>

<p>
如果你将以上代码放入主文件夹的.bashrc文件里面，每次终端启动都会自动加载，也就是以后终端启动都是这个样子了。
</p>
</div>
</div>
</div>


<div class="outline-4">
<h4 id="orgheadline50">declare命令</h4>
<div class="outline-text-4" id="text-6-1-3">
<div class="highlight"><pre><span></span><span class="nb">declare</span> <span class="nv">i</span><span class="o">=</span>1
</pre></div>

<p>
declare命令一般使用如上，如果加上 <code>-x</code> 选项就是声明全局变量了。
</p>
</div>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline52">echo命令</h3>
<div class="outline-text-3" id="text-6-2">
<p>
echo命令前面接触很多了，这里不赘述了。echo命令就是用于查看某个变量的值或者直接输出一行字符串。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline53">read命令</h3>
<div class="outline-text-3" id="text-6-3">
<p>
请求用户输入某个变量的值：
</p>
<div class="highlight"><pre><span></span><span class="nb">read</span> name <span class="p">;</span> <span class="nb">echo</span> <span class="s1">&#39;你输入的是：&#39;</span><span class="si">${</span><span class="nv">name</span><span class="si">}</span>
</pre></div>

<p>
下面将会点到而止的讲一下流程控制的条件语句和循环语句，这些对于某些短小的shell命令行也是有用的。
</p>
</div>
</div>

<div class="outline-3">
<h3 id="orgheadline55">流程控制之条件语句</h3>
<div class="outline-text-3" id="text-6-4">
<p>
if条件语句格式是：
</p>
<pre>
if  [ test expression ]
then    do what
fi
</pre>

<p>
对于短小的shell命令行，可以写成这样的一行格式，其中分号表示换行。
</p>

<pre>
if [ test expression ]; then do what ; fi
</pre>

<p>
这里加分号的地方是shell脚本多行格式的情况下比如换行的地方。
</p>

<p>
还值得提醒一下的是：条件判断语句（就是上面的test expression）要和那个方括号[]有一个空格表示分开。
</p>
</div>

<div class="outline-4">
<h4 id="orgheadline54">应用：确认某个文件夹是不是存在</h4>
<div class="outline-text-4" id="text-6-4-1">
<div class="highlight"><pre><span></span><span class="k">if</span> <span class="o">[</span>  !  -d  workspace  <span class="o">]</span><span class="p">;</span>  <span class="k">then</span> mkdir workspace   <span class="p">;</span> <span class="k">fi</span>
</pre></div>

<p>
-d表示检测某个文件夹是不是存在，!符号在这里进行逻辑否操作。也就是这里如果workspace不存在，那么新建workspace文件夹。
</p>
</div>
</div>
</div>


<div class="outline-3">
<h3 id="orgheadline59">for循环</h3>
<div class="outline-text-3" id="text-6-5">
<p>
for循环语句格式如下：
</p>
<pre>
for  var in 1 2 3
do do what1
   do what2
done
</pre>

<p>
同样，你也可以将其写成一行的样子：
</p>

<pre>
for var in 1 2 3 ; do do what1 ; do what2 ; done
</pre>

<p>
其中加分号的地方为多行格式下比如换行的地方。
</p>
</div>

<div class="outline-4">
<h4 id="orgheadline56">应用：小数点递加输出流</h4>
<div class="outline-text-4" id="text-6-5-1">
<div class="highlight"><pre><span></span><span class="k">for</span> animate in <span class="k">$(</span>seq 4.0 0.1 8.0<span class="k">)</span><span class="p">;</span> <span class="k">do</span>  <span class="nb">echo</span> <span class="nv">$animate</span> <span class="p">;</span> <span class="k">done</span>
</pre></div>

<p>
关于seq命令我简单的复制 <code>--help</code> 的一些信息了：
</p>
<pre>
用法：seq [选项]... 尾数
　或：seq [选项]... 首数 尾数
　或：seq [选项]... 首数 增量 尾数
</pre>
</div>
</div>



<div class="outline-4">
<h4 id="orgheadline57">应用：批量创建文件</h4>
<div class="outline-text-4" id="text-6-5-2">
<p>
在文件夹里面输入如下命令：
</p>
<div class="highlight"><pre><span></span><span class="k">for</span> <span class="o">((</span> <span class="nv">i</span><span class="o">=</span>1<span class="p">;</span> i&lt;<span class="o">=</span>10<span class="p">;</span> i++ <span class="o">))</span><span class="p">;</span> <span class="k">do</span>  touch file<span class="nv">$i</span>.txt<span class="p">;</span> <span class="k">done</span>
</pre></div>

<p>
这样会在该文件夹里面批量创建10个文件，文件名依次为file1.txt，file2.txt&#x2026;&#x2026;file10.txt。
</p>

<p>
这个for语句类似于C语言的for语句，第一个语句初始化，第二个语句测试循环退出机制，第三个语句用于递加某个表达式。 
</p>
</div>
</div>



<div class="outline-4">
<h4 id="orgheadline58">应用：批量缩小图片大小</h4>
<div class="outline-text-4" id="text-6-5-3">
<p>
这是一个多行脚本，用于批量缩小图片的大小。
</p>
<div class="highlight"><pre><span></span><span class="k">if</span> <span class="o">[</span>  !  -d  smallsize  <span class="o">]</span><span class="p">;</span>  <span class="k">then</span> mkdir smallsize   <span class="p">;</span> <span class="k">fi</span>
<span class="nb">cd</span> smallsize

<span class="nb">let</span> <span class="nv">i</span><span class="o">=</span>1
<span class="k">for</span> it in <span class="k">$(</span>ls *.png<span class="k">)</span>
<span class="k">do</span> convert -resize 50%x50% <span class="nv">$it</span>  <span class="nv">$i</span>-<span class="nv">$it</span>
<span class="nb">let</span> <span class="nv">i</span><span class="o">=</span>i+1
<span class="nb">echo</span> <span class="nv">$it</span> is smallsized<span class="p">;</span> <span class="k">done</span>
</pre></div>
</div>
</div>
</div>
</div>






<div class="outline-2">
<h2 id="orgheadline61">参考资料</h2>
<div class="outline-text-2" id="text-7">
<ol class="org-ol">
<li>有名的鸟哥的私房菜 <a href="http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php">官方网站</a></li>
<li>所有文件合并在一起参考了这个网页：<a href="http://unix.stackexchange.com/questions/3770/how-to-merge-all-text-files-in-a-directory-into-one">merge all file</a> 。</li>
<li><a href="http://www.twbsd.org/chs/book/index.php">FreeBSD 6.0架设管理与应用</a> 作者：王俊斌 。</li>
<li><a href="http://www.cyberciti.biz/faq/bash-for-loop/">bash for loop</a> ，这个网页关于bash编程的循环部分讲的很详细。</li>
</ol>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara">下图引用自网站 <a href="http://www.eglug.org/node/456"><a href="http://www.eglug.org/node/456">http://www.eglug.org/node/456</a></a> 。</div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara">参考<a href="http://unix.stackexchange.com/questions/118433/quoting-within-command-substitution-in-bash">这个网页</a></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara">如果有其他存储设备，比如U盘等，当然也包括在内，这里说各个硬盘分区主要是为了描述的简单。</div></div>


</div>
</div></div>
</body>
</html>
